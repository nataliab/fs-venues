// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSTimeZone;

@interface NSDate (SWIFT_EXTENSION(CleanroomDateTime))

/// Formats the receiver as a date string using the specified NSDateFormatterStyle.
///
/// \param style The <code>NSDateFormatterStyle
/// </code> that specifies the format
/// of the string to be returned.
///
/// \param timeZone The <code>NSTimeZone
/// </code> associated with the date being
/// formatted. If <code>nil
/// </code>, the time zone will not be taken into account.
///
/// \returns  The string representation of the receiver's date.
- (NSString * _Nonnull)formatDateWithStyle:(NSDateFormatterStyle)style timeZone:(NSTimeZone * _Nullable)timeZone;

/// Formats the receiver as a time string using the specified NSDateFormatterStyle.
///
/// \param style The <code>NSDateFormatterStyle
/// </code> that specifies the format
/// of the string to be returned.
///
/// \param timeZone The <code>NSTimeZone
/// </code> associated with the time being
/// formatted. If <code>nil
/// </code>, the time zone will not be taken into account.
///
/// \returns  The string representation of the receiver's time.
- (NSString * _Nonnull)formatTimeWithStyle:(NSDateFormatterStyle)style timeZone:(NSTimeZone * _Nullable)timeZone;

/// Formats the receiver as a date/time string using the specified NSDateFormatterStyle.
///
/// \param style The <code>NSDateFormatterStyle
/// </code> that specifies the format
/// of the string to be returned.
///
/// \param timeZone The <code>NSTimeZone
/// </code> associated with the date and time
/// being formatted. If <code>nil
/// </code>, the time zone will not be taken into account.
///
/// \returns  The string representation of the receiver's date and time.
- (NSString * _Nonnull)formatDateTimeWithStyle:(NSDateFormatterStyle)style timeZone:(NSTimeZone * _Nullable)timeZone;

/// Formats the receiver as a date string in the UTC time zone using the specified NSDateFormatterStyle.
///
/// \param style The <code>NSDateFormatterStyle
/// </code> that specifies the format
/// of the string to be returned.
///
/// \returns  The string representation of the receiver's date.
- (NSString * _Nonnull)formatUTCDateWithStyle:(NSDateFormatterStyle)style;

/// Formats the receiver as a time string in the UTC time zone using the specified NSDateFormatterStyle.
///
/// \param style The <code>NSDateFormatterStyle
/// </code> that specifies the format
/// of the string to be returned.
///
/// \returns  The string representation of the receiver's time.
- (NSString * _Nonnull)formatUTCTimeWithStyle:(NSDateFormatterStyle)style;

/// Formats the receiver as a date/time string in the UTC time zone using the specified NSDateFormatterStyle.
///
/// \param style The <code>NSDateFormatterStyle
/// </code> that specifies the format
/// of the string to be returned.
///
/// \returns  The string representation of the receiver's date and time.
- (NSString * _Nonnull)formatUTCDateTimeWithStyle:(NSDateFormatterStyle)style;

/// Formats the receiver as an RFC 1123 date/time string.
///
/// \param inLocalTime If <code>true
/// </code>, the returned string will represent
/// the user's local time; otherwise, UTC time is used.
///
/// \returns  The string representation of the receiver's date and time.
- (NSString * _Nonnull)asRFC1123:(BOOL)inLocalTime;

/// Formats the receiver as an ISO 8601 date/time string.
///
/// \param inLocalTime If <code>true
/// </code>, the returned string will represent
/// the user's local time; otherwise, UTC time is used.
///
/// \returns  The string representation of the receiver's date and time.
- (NSString * _Nonnull)asISO8601:(BOOL)inLocalTime;
@end


@interface NSDate (SWIFT_EXTENSION(CleanroomDateTime))

/// The number of whole 7-day periods since the date represented by the receiver. If the receiver is in the future, the value will be negative.
@property (nonatomic, readonly) NSInteger weeksSince;

/// The number of whole 24-hour periods since the date represented by the receiver. If the receiver is in the future, the value will be negative.
@property (nonatomic, readonly) NSInteger daysSince;

/// The number of whole 60-minute periods since the date represented by the receiver. If the receiver is in the future, the value will be negative.
@property (nonatomic, readonly) NSInteger hoursSince;

/// The number of whole 60-second periods since the date represented by the receiver. If the receiver is in the future, the value will be negative.
@property (nonatomic, readonly) NSInteger minutesSince;

/// The number of whole seconds since the date represented by the receiver. If the receiver is in the future, the value will be negative.
@property (nonatomic, readonly) NSInteger secondsSince;
@end


@interface NSDate (SWIFT_EXTENSION(CleanroomDateTime))

/// The number of whole 7-day periods until the date represented by the receiver. If the receiver is in the past, the value will be negative.
@property (nonatomic, readonly) NSInteger weeksUntil;

/// The number of whole 24-hour periods until the date represented by the receiver. If the receiver is in the past, the value will be negative.
@property (nonatomic, readonly) NSInteger daysUntil;

/// The number of whole 60-minute periods until the date represented by the receiver. If the receiver is in the past, the value will be negative.
@property (nonatomic, readonly) NSInteger hoursUntil;

/// The number of whole 60-second periods until the date represented by the receiver. If the receiver is in the past, the value will be negative.
@property (nonatomic, readonly) NSInteger minutesUntil;

/// The number of whole seconds until the date represented by the receiver. If the receiver is in the past, the value will be negative.
@property (nonatomic, readonly) NSInteger secondsUntil;
@end


@interface NSDate (SWIFT_EXTENSION(CleanroomDateTime))

/// Returns a new NSDate set to the same day as the receiver but with a time value specified by the given hour, minute, second and nanosecond components.
///
/// :param:     hour The hour component of the time.
///
/// :param:     minute The minute component of the time.
///
/// :param:     second The second component of the time.
///
/// :param:     nanosecond The nanosecond component of the time.
///
/// :returns:   The new <code>NSDate
/// </code> instance.
- (NSDate * _Nonnull)sameDayWithHour:(NSInteger)hour minute:(NSInteger)minute second:(NSInteger)second nanosecond:(NSInteger)nanosecond;

/// Returns a new NSDate representing the 24-hour time 00:00:00 on the same day as the receiver.
@property (nonatomic, readonly, strong) NSDate * _Nonnull startOfDay;

/// Returns a new NSDate representing the 24-hour time 23:59:59.999999999 on the same day as the receiver.
@property (nonatomic, readonly, strong) NSDate * _Nonnull endOfDay;

/// Returns a new NSDate representing the current time, but with yesterday's date.
+ (NSDate * _Nonnull)yesterday;

/// Returns a new NSDate representing the current time, but with tomorrow's date.
+ (NSDate * _Nonnull)tomorrow;

/// Returns a new NSDate containing the same time as the receiver, but with the date adjusted earlier or later by the given number of days.
///
/// :param:     days The number of days to add to (if positive) or subtract
/// from (if negative) the receiver.
///
/// :returns:   The new <code>NSDate
/// </code> instance.
- (NSDate * _Nonnull)adjustDay:(NSInteger)days;

/// Returns a new NSDate containing the same time as the receiver, but one day earlier.
///
/// :returns:   The new <code>NSDate
/// </code> instance.
@property (nonatomic, readonly, strong) NSDate * _Nonnull dayBefore;

/// Returns a new NSDate containing the same time as the receiver, but one day later.
///
/// :returns:   The new <code>NSDate
/// </code> instance.
@property (nonatomic, readonly, strong) NSDate * _Nonnull dayAfter;
@end


@interface NSDate (SWIFT_EXTENSION(CleanroomDateTime))

/// true if the receiver represents a time in the past; false otherwise.
@property (nonatomic, readonly) BOOL isPast;

/// true if the receiver represents the current time; false otherwise.
@property (nonatomic, readonly) BOOL isNow;

/// true if the receiver represents a time in the future; false otherwise.
@property (nonatomic, readonly) BOOL isFuture;

/// true if the receiver represents any time yesterday; false otherwise.
@property (nonatomic, readonly) BOOL isYesterday;

/// true if the receiver represents any time today; false otherwise.
@property (nonatomic, readonly) BOOL isToday;

/// true if the receiver represents any time tomorrow; false otherwise.
@property (nonatomic, readonly) BOOL isTomorrow;

/// true if the receiver represents any time before today; false otherwise.
@property (nonatomic, readonly) BOOL isEarlierThanToday;

/// true if the receiver represents any time after today; false otherwise.
@property (nonatomic, readonly) BOOL isLaterThanToday;

/// Determines if the receiver represents a time between two given times or is equal to one of the times.
///
/// <em>Note:</em> The order of the <code>time1
/// </code> and <code>time2
/// </code> arguments is not significant;
/// they may be swapped without changing the return value of the function.
///
/// :param:     time1 The first <code>NSDate
/// </code> value.
///
/// :param:     time2 The second <code>NSDate
/// </code> value.
///
/// :returns:   <code>true
/// </code> if the receiver represents any time between <code>time1
/// </code> and
/// <code>time2
/// </code> (inclusive); <code>false
/// </code> otherwise.
- (BOOL)isBetween:(NSDate * _Nonnull)time1 and:(NSDate * _Nonnull)time2;

/// Determines if the current time falls between two given times or is equal to one of the times.
///
/// <em>Note:</em> The order of the <code>time1
/// </code> and <code>time2
/// </code> arguments is not significant;
/// they may be swapped without changing the return value of the function.
///
/// :param:     time1 The first <code>NSDate
/// </code> value.
///
/// :param:     time2 The second <code>NSDate
/// </code> value.
///
/// :returns:   <code>true
/// </code> if the current time is between <code>time1
/// </code> and <code>time2
/// </code>
/// (inclusive); <code>false
/// </code> otherwise.
+ (BOOL)currentTimeIsBetween:(NSDate * _Nonnull)time1 and:(NSDate * _Nonnull)time2;

/// Determines whether the specified NSDate represents the same day as the receiver.
///
/// :param:     date The date to test.
///
/// :returns:   <code>true
/// </code> if <code>date
/// </code> represents any time on the same day as
/// the receiver; <code>false
/// </code> otherwise.
- (BOOL)isSameDayAs:(NSDate * _Nonnull)date;
@end


@interface NSDate (SWIFT_EXTENSION(CleanroomDateTime))

/// The year component of the date represented by the receiver.
@property (nonatomic, readonly) NSInteger year;

/// The month component of the date represented by the receiver.
@property (nonatomic, readonly) NSInteger month;

/// The day (of the month) component of the date represented by the receiver.
@property (nonatomic, readonly) NSInteger day;

/// The hour component of the date represented by the receiver.
@property (nonatomic, readonly) NSInteger hour;

/// The minute component of the date represented by the receiver.
@property (nonatomic, readonly) NSInteger minute;

/// The second component of the date represented by the receiver.
@property (nonatomic, readonly) NSInteger second;

/// The nanosecond component of the date represented by the receiver.
@property (nonatomic, readonly) NSInteger nanosecond;

/// The weekday component of the date represented by the receiver. This is a value between 1 and n (inclusive). In the Gregorian calendar, 1 represents Sunday, while n is 7, representing Saturday.
@property (nonatomic, readonly) NSInteger weekday;

/// The weekdayOrdinal component of the date represented by the receiver. This value indicates the current weekday's ordinal position within the current month. In the Gregorian calendar, a weekdayOrdinal unit of 3 for a weekday of 4 represents "the third Wednesday in the month."
@property (nonatomic, readonly) NSInteger weekdayOrdinal;

/// The weekOfMonth component of the date represented by the receiver.
@property (nonatomic, readonly) NSInteger weekOfMonth;

/// The weekOfYear component of the date represented by the receiver.
@property (nonatomic, readonly) NSInteger weekOfYear;

/// The timeZone component of the date represented by the receiver, or nil if it could not be determined.
@property (nonatomic, readonly, strong) NSTimeZone * _Nullable timeZone;
@end


@interface NSDictionary (SWIFT_EXTENSION(CleanroomDateTime))
- (NSDate * _Nullable)requiredRFC1123Date:(NSString * _Nonnull)key error:(NSError * _Nullable * _Null_unspecified)error;
- (NSDate * _Nullable)requiredISO8601Date:(NSString * _Nonnull)key error:(NSError * _Nullable * _Null_unspecified)error;
@end

#pragma clang diagnostic pop
