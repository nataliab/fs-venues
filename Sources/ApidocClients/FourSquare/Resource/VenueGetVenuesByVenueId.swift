//
//  VenueGetVenuesByVenueId.swift
//
//  Foursquare
//
//  Contains:
//  class VenueGetVenuesByVenueId
//
//  Generated by SwiftPoet on 24/05/2016
//
//

import CleanroomDataTransactions
import CleanroomConcurrency
import Foundation

/**
    Venue details
*/
public class VenueGetVenuesByVenueId: WrappingDataTransaction {
    public typealias MetadataType = WrappedTransactionType.MetadataType
    public typealias Result = TransactionResult<DataType, MetadataType>
    public typealias Callback = (Result) -> Void
    public typealias DataType = VenueDetailsResponseWrapper
    public typealias WrappedTransactionType = ApiDocDictionaryTransaction
    public let wrappedTransaction : WrappedTransactionType?

    /**
        :param:    venueId

        :param:    clientId

        :param:    clientSecret

        :param:    v Version parameter
    */
    public init (venueId : String, clientId : String, clientSecret : String, v : String) throws {
        
        let queryParams: [String : String?]? = [
            
            "client_id" : clientId
            , "client_secret" : clientSecret
            , "v" : v ]

        do {
            let request = NSMutableURLRequest(URL: try VenueGetVenuesByVenueId.getUrl( venueId, queryParams : queryParams))
            request.HTTPMethod = "GET"

            self.wrappedTransaction = ApiDocDictionaryTransaction(request: request, uploadData: nil)
        }
        catch {
            
            self.wrappedTransaction = nil
            throw error
        }
    }

    /**
        :param:    venueId
    */
    static private func getBaseUrl (venueId : String) -> String {
        return Foursquare.baseUrl + "/venues/\(venueId)"
    }

    /**
        :param:    venueId

        :param:    queryParams
    */
    static private func getUrl (venueId : String, queryParams : [String:String?]?) throws -> NSURL {
        
        let urlBuilder = NSURLComponents(string: VenueGetVenuesByVenueId.getBaseUrl( venueId ))

        urlBuilder?.queryItems =  queryParams?.flatMap {
            ( k, v ) -> NSURLQueryItem? in
                
                if v != nil {
                    return NSURLQueryItem(name: k, value: v)
                }
                return nil
        }

        guard let url = urlBuilder?.URL else {
            throw DataTransactionError.InvalidURL(urlBuilder?.string ?? "N/A")
        }

        return url
    }

    /**
        :param:    completion
    */
    public func executeTransaction (completion : Callback) {
        wrappedTransaction?.executeTransaction() {
            ( result ) -> Void in
                switch result {
                    case .Failed(let error) :
                    
                        completion(.Failed(error))
                    case .Succeeded(let payload, let meta) :
                    
                        async {
                            do {
                                
                                let model = try VenueDetailsResponseWrapper(payload: payload)
                                completion(.Succeeded(model, meta))
                            }
                            catch {
                                completion(.Failed(.wrap(error)))
                            }
                        }
                }
        }
    }

}
